// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: protos/zrpc-dois.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZrpcDoisService_ZrpcDoisMethod_FullMethodName = "/usuario.ZrpcDoisService/ZrpcDoisMethod"
)

// ZrpcDoisServiceClient is the client API for ZrpcDoisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZrpcDoisServiceClient interface {
	ZrpcDoisMethod(ctx context.Context, in *ZrpcDoisMethodRequest, opts ...grpc.CallOption) (*ZrpcDoisMethodResponse, error)
}

type zrpcDoisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZrpcDoisServiceClient(cc grpc.ClientConnInterface) ZrpcDoisServiceClient {
	return &zrpcDoisServiceClient{cc}
}

func (c *zrpcDoisServiceClient) ZrpcDoisMethod(ctx context.Context, in *ZrpcDoisMethodRequest, opts ...grpc.CallOption) (*ZrpcDoisMethodResponse, error) {
	out := new(ZrpcDoisMethodResponse)
	err := c.cc.Invoke(ctx, ZrpcDoisService_ZrpcDoisMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZrpcDoisServiceServer is the server API for ZrpcDoisService service.
// All implementations must embed UnimplementedZrpcDoisServiceServer
// for forward compatibility
type ZrpcDoisServiceServer interface {
	ZrpcDoisMethod(context.Context, *ZrpcDoisMethodRequest) (*ZrpcDoisMethodResponse, error)
	mustEmbedUnimplementedZrpcDoisServiceServer()
}

// UnimplementedZrpcDoisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZrpcDoisServiceServer struct {
}

func (UnimplementedZrpcDoisServiceServer) ZrpcDoisMethod(context.Context, *ZrpcDoisMethodRequest) (*ZrpcDoisMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZrpcDoisMethod not implemented")
}
func (UnimplementedZrpcDoisServiceServer) mustEmbedUnimplementedZrpcDoisServiceServer() {}

// UnsafeZrpcDoisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZrpcDoisServiceServer will
// result in compilation errors.
type UnsafeZrpcDoisServiceServer interface {
	mustEmbedUnimplementedZrpcDoisServiceServer()
}

func RegisterZrpcDoisServiceServer(s grpc.ServiceRegistrar, srv ZrpcDoisServiceServer) {
	s.RegisterService(&ZrpcDoisService_ServiceDesc, srv)
}

func _ZrpcDoisService_ZrpcDoisMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZrpcDoisMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZrpcDoisServiceServer).ZrpcDoisMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZrpcDoisService_ZrpcDoisMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZrpcDoisServiceServer).ZrpcDoisMethod(ctx, req.(*ZrpcDoisMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZrpcDoisService_ServiceDesc is the grpc.ServiceDesc for ZrpcDoisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZrpcDoisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usuario.ZrpcDoisService",
	HandlerType: (*ZrpcDoisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZrpcDoisMethod",
			Handler:    _ZrpcDoisService_ZrpcDoisMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/zrpc-dois.proto",
}
