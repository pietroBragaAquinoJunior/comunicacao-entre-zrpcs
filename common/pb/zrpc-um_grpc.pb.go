// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: protos/zrpc-um.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZrpcUmService_ZrpcUmMethod_FullMethodName = "/usuario.ZrpcUmService/ZrpcUmMethod"
)

// ZrpcUmServiceClient is the client API for ZrpcUmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZrpcUmServiceClient interface {
	ZrpcUmMethod(ctx context.Context, in *ZrpcUmMethodRequest, opts ...grpc.CallOption) (*ZrpcUmMethodResponse, error)
}

type zrpcUmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZrpcUmServiceClient(cc grpc.ClientConnInterface) ZrpcUmServiceClient {
	return &zrpcUmServiceClient{cc}
}

func (c *zrpcUmServiceClient) ZrpcUmMethod(ctx context.Context, in *ZrpcUmMethodRequest, opts ...grpc.CallOption) (*ZrpcUmMethodResponse, error) {
	out := new(ZrpcUmMethodResponse)
	err := c.cc.Invoke(ctx, ZrpcUmService_ZrpcUmMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZrpcUmServiceServer is the server API for ZrpcUmService service.
// All implementations must embed UnimplementedZrpcUmServiceServer
// for forward compatibility
type ZrpcUmServiceServer interface {
	ZrpcUmMethod(context.Context, *ZrpcUmMethodRequest) (*ZrpcUmMethodResponse, error)
	mustEmbedUnimplementedZrpcUmServiceServer()
}

// UnimplementedZrpcUmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZrpcUmServiceServer struct {
}

func (UnimplementedZrpcUmServiceServer) ZrpcUmMethod(context.Context, *ZrpcUmMethodRequest) (*ZrpcUmMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZrpcUmMethod not implemented")
}
func (UnimplementedZrpcUmServiceServer) mustEmbedUnimplementedZrpcUmServiceServer() {}

// UnsafeZrpcUmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZrpcUmServiceServer will
// result in compilation errors.
type UnsafeZrpcUmServiceServer interface {
	mustEmbedUnimplementedZrpcUmServiceServer()
}

func RegisterZrpcUmServiceServer(s grpc.ServiceRegistrar, srv ZrpcUmServiceServer) {
	s.RegisterService(&ZrpcUmService_ServiceDesc, srv)
}

func _ZrpcUmService_ZrpcUmMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZrpcUmMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZrpcUmServiceServer).ZrpcUmMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZrpcUmService_ZrpcUmMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZrpcUmServiceServer).ZrpcUmMethod(ctx, req.(*ZrpcUmMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZrpcUmService_ServiceDesc is the grpc.ServiceDesc for ZrpcUmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZrpcUmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usuario.ZrpcUmService",
	HandlerType: (*ZrpcUmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZrpcUmMethod",
			Handler:    _ZrpcUmService_ZrpcUmMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/zrpc-um.proto",
}
